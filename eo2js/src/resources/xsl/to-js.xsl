<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Copyright (c) 2024 Objectionary.com
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
-->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:eo="https://www.eolang.org" xmlns:xs="http://www.w3.org/2001/XMLSchema" id="to-java" version="2.0">
  <!-- Converts XMIR to JavaScript -->
  <xsl:output encoding="UTF-8" method="xml"/>
  <!-- VARIABLES -->
  <xsl:variable name="keywords" as="element()*">
    <a>abstract</a>
    <a>async</a>
    <a>await</a>
    <a>boolean</a>
    <a>break</a>
    <a>byte</a>
    <a>case</a>
    <a>catch</a>
    <a>char</a>
    <a>class</a>
    <a>const</a>
    <a>constructor</a>
    <a>continue</a>
    <a>debugger</a>
    <a>default</a>
    <a>delete</a>
    <a>do</a>
    <a>double</a>
    <a>else</a>
    <a>enum</a>
    <a>eval</a>
    <a>export</a>
    <a>extends</a>
    <a>false</a>
    <a>final</a>
    <a>finally</a>
    <a>float</a>
    <a>for</a>
    <a>function</a>
    <a>goto</a>
    <a>if</a>
    <a>implements</a>
    <a>import</a>
    <a>in</a>
    <a>instanceof</a>
    <a>int</a>
    <a>interface</a>
    <a>let</a>
    <a>long</a>
    <a>native</a>
    <a>new</a>
    <a>null</a>
    <a>of</a>
    <a>package</a>
    <a>private</a>
    <a>protected</a>
    <a>proto</a>
    <a>prototype</a>
    <a>public</a>
    <a>return</a>
    <a>short</a>
    <a>static</a>
    <a>super</a>
    <a>synchronized</a>
    <a>switch</a>
    <a>this</a>
    <a>throw</a>
    <a>true</a>
    <a>transient</a>
    <a>try</a>
    <a>typeof</a>
    <a>var</a>
    <a>void</a>
    <a>volatile</a>
    <a>while</a>
    <a>with</a>
    <a>yield</a>
  </xsl:variable>
  <!-- Disclaimer -->
  <xsl:variable name="disclaimer">
    <xsl:text>This file was auto-generated by eo2js, your changes will be discarded on the next build</xsl:text>
  </xsl:variable>
  <!-- Tab -->
  <xsl:variable name="TAB">
    <xsl:text>  </xsl:text>
  </xsl:variable>
  <!-- RHO -->
  <xsl:variable name="RHO">
    <xsl:text>ρ</xsl:text>
  </xsl:variable>
  <!-- PHI -->
  <xsl:variable name="PHI">
    <xsl:text>φ</xsl:text>
  </xsl:variable>
  <!-- DELTA -->
  <xsl:variable name="DELTA">
    <xsl:text>Δ</xsl:text>
  </xsl:variable>
  <!-- FUNCTIONS  -->
  <!-- EOL with tabs -->
  <xsl:function name="eo:eol">
    <xsl:param name="tabs"/>
    <xsl:value-of select="'&#10;'"/>
    <xsl:value-of select="eo:tabs($tabs)"/>
  </xsl:function>
  <!-- Tabs -->
  <xsl:function name="eo:tabs">
    <xsl:param name="n"/>
    <xsl:for-each select="1 to $n">
      <xsl:value-of select="$TAB"/>
    </xsl:for-each>
  </xsl:function>
  <!-- Clean name -->
  <xsl:function name="eo:clean" as="xs:string">
    <xsl:param name="n" as="xs:string"/>
    <xsl:value-of select="replace(replace(replace(replace($n, '_', '__'), '-', '_'), '@', $PHI), 'α', '_')"/>
  </xsl:function>
  <!-- Concat arguments via _ -->
  <xsl:function name="eo:suffix" as="xs:string">
    <xsl:param name="s1"/>
    <xsl:param name="s2"/>
    <xsl:value-of select="concat(concat($s1, '_'), $s2)"/>
  </xsl:function>
  <!-- Replace keywords in object name with safe one -->
  <xsl:function name="eo:safe-name">
    <xsl:param name="name"/>
    <xsl:choose>
      <xsl:when test="$keywords/text()=$name">
        <xsl:value-of select="concat('_', $name)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$name"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>
  <!-- Construct valid object name -->
  <xsl:function name="eo:object-name" as="xs:string">
    <xsl:param name="name" as="xs:string"/>
    <xsl:param name="alt" as="xs:string"/>
    <xsl:variable name="parts" select="tokenize($name, '\.')"/>
    <xsl:variable name="pkg">
      <xsl:for-each select="$parts">
        <xsl:if test="position()!=last()">
          <xsl:value-of select="eo:clean(.)"/>
          <xsl:text>.</xsl:text>
        </xsl:if>
      </xsl:for-each>
    </xsl:variable>
    <xsl:variable name="self">
      <xsl:choose>
        <xsl:when test="count($parts)&gt;1">
          <xsl:value-of select="eo:clean($parts[last()])"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="eo:safe-name(eo:clean($parts))"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:variable>
    <xsl:variable name="pre" select="concat($pkg, $self)"/>
    <xsl:choose>
      <xsl:when test="string-length($pre)&gt;250">
        <xsl:value-of select="concat(substring($pre, 1, 25), $alt)"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="$pre"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>
  <!-- Return valid name of the attribute -->
  <xsl:function name="eo:attr-name" as="xs:string">
    <xsl:param name="attr" as="xs:string"/>
    <xsl:choose>
      <xsl:when test="$attr='@'">
        <xsl:value-of select="$PHI"/>
      </xsl:when>
      <xsl:when test="$attr='^'">
        <xsl:value-of select="$RHO"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="concat('', $attr)"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>
  <!-- Fetch object -->
  <!-- org.eolang.int -> phi.take('org').take('eolang').take('int') -->
  <xsl:function name="eo:fetch">
    <xsl:param name="object"/>
    <xsl:variable name="parts" select="tokenize($object, '\.')"/>
    <xsl:text>phi</xsl:text>
    <xsl:for-each select="$parts">
      <xsl:text>.take('</xsl:text>
      <xsl:value-of select="."/>
      <xsl:text>')</xsl:text>
    </xsl:for-each>
  </xsl:function>
  <!-- TEMPLATES -->
  <xsl:template match="objects">
    <xsl:copy>
      <xsl:apply-templates select="@*"/>
      <xsl:for-each select="object[not(@atom)]">
        <xsl:copy>
          <xsl:apply-templates select="@*"/>
          <xsl:element name="javascript">
            <xsl:if test="position()=1">
              <xsl:apply-templates select="/program" mode="license"/>
              <xsl:apply-templates select="/program" mode="imports"/>
              <xsl:if test="//meta[head='tests'] and not(@parent)">
                <xsl:apply-templates select="/program" mode="test-imports"/>
              </xsl:if>
              <xsl:apply-templates select="//object[@atom]" mode="atom-imports"/>
            </xsl:if>
            <xsl:apply-templates select="." mode="body"/>
          </xsl:element>
        </xsl:copy>
      </xsl:for-each>
      <!-- module.exports part -->
      <xsl:if test="not(//meta[head='tests'] and not(@parent)) and object[position()=1 and not(@atom)]">
        <xsl:element name="object">
          <xsl:element name="javascript">
            <xsl:value-of select="eo:eol(0)"/>
            <xsl:value-of select="eo:eol(0)"/>
            <xsl:text>module.exports = </xsl:text>
            <xsl:variable name="obj" select="object[position()=1]"/>
            <xsl:value-of select="eo:object-name($obj/@name, eo:suffix($obj/@line, $obj/@pos))"/>
          </xsl:element>
        </xsl:element>
      </xsl:if>
    </xsl:copy>
  </xsl:template>
  <!-- Object name -->
  <xsl:template match="object/@name">
    <xsl:attribute name="name">
      <xsl:value-of select="."/>
    </xsl:attribute>
    <xsl:attribute name="js-name">
      <xsl:variable name="pkg" select="//metas/meta[head='package']/part[1]"/>
      <xsl:choose>
        <xsl:when test="$pkg">
          <xsl:value-of select="eo:object-name(concat($pkg, '.', .), eo:suffix(../@line, ../@pos))"/>
        </xsl:when>
        <xsl:otherwise>
          <xsl:value-of select="eo:object-name(., eo:suffix(../@line, ../@pos))"/>
        </xsl:otherwise>
      </xsl:choose>
    </xsl:attribute>
  </xsl:template>
  <!-- Object body -->
  <xsl:template match="object" mode="body">
    <xsl:apply-templates select="xmir"/>
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:text>const </xsl:text>
    <xsl:value-of select="eo:object-name(@name, eo:suffix(@line, @pos))"/>
    <xsl:text> = function() {</xsl:text>
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:apply-templates select="." mode="ctor"/>
    <xsl:text>}</xsl:text>
    <xsl:apply-templates select="object" mode="body"/>
    <xsl:if test="//meta[head='tests'] and not(@parent)">
      <xsl:apply-templates select="." mode="tests"/>
    </xsl:if>
    <xsl:value-of select="eo:eol(0)"/>
  </xsl:template>
  <!-- XMIR as comment -->
  <xsl:template match="xmir">
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:for-each select="tokenize(text(), '&#10;')">
      <xsl:value-of select="eo:eol(0)"/>
      <xsl:text>//</xsl:text>
      <xsl:value-of select="."/>
    </xsl:for-each>
  </xsl:template>
  <!-- OBJECT CONSTRUCTING -->
  <xsl:template match="object" mode="ctor">
    <xsl:value-of select="eo:tabs(1)"/>
    <xsl:text>const obj = object('</xsl:text>
    <xsl:value-of select="@name"/>
    <xsl:text>')</xsl:text>
    <!-- Void attributes first -->
    <xsl:apply-templates select="attr[void]">
      <xsl:with-param name="object" select="."/>
      <xsl:with-param name="indent">
        <xsl:value-of select="eo:tabs(2)"/>
      </xsl:with-param>
    </xsl:apply-templates>
    <!-- Bound attributes next -->
    <xsl:apply-templates select="attr[not(void)]">
      <xsl:with-param name="object" select="."/>
      <xsl:with-param name="indent">
        <xsl:value-of select="eo:tabs(2)"/>
      </xsl:with-param>
    </xsl:apply-templates>
    <xsl:value-of select="eo:eol(1)"/>
    <xsl:text>return obj</xsl:text>
    <xsl:value-of select="eo:eol(0)"/>
  </xsl:template>
  <!-- Attribute -->
  <xsl:template match="attr">
    <xsl:value-of select="eo:eol(1)"/>
    <xsl:text>obj.attrs['</xsl:text>
    <xsl:value-of select="eo:attr-name(@name)"/>
    <xsl:text>'] = </xsl:text>
    <xsl:apply-templates select="*">
      <xsl:with-param name="name" select="eo:attr-name(@name)"/>
    </xsl:apply-templates>
  </xsl:template>
  <!-- Void attribute -->
  <xsl:template match="void">
    <xsl:param name="name"/>
    <xsl:text>attr.void('</xsl:text>
    <xsl:value-of select="$name"/>
    <xsl:text>')</xsl:text>
  </xsl:template>
  <!-- Bound attribute -->
  <xsl:template match="bound">
    <xsl:text>attr.once(</xsl:text>
    <xsl:value-of select="eo:eol(2)"/>
    <xsl:text>attr.lambda(</xsl:text>
    <xsl:value-of select="eo:eol(3)"/>
    <xsl:text>obj, function(rho) {</xsl:text>
    <xsl:apply-templates select="*">
      <xsl:with-param name="name" select="'ret'"/>
      <xsl:with-param name="indent" select="4"/>
    </xsl:apply-templates>
    <xsl:value-of select="eo:eol(4)"/>
    <xsl:text>return ret</xsl:text>
    <xsl:value-of select="eo:eol(3)"/>
    <xsl:text>}</xsl:text>
    <xsl:value-of select="eo:eol(2)"/>
    <xsl:text>)</xsl:text>
    <xsl:value-of select="eo:eol(1)"/>
    <xsl:text>)</xsl:text>
  </xsl:template>
  <!--  <xsl:template match="o[not(@base) and not(@name)]">-->
  <!--    <xsl:param name="indent"/>-->
  <!--    <xsl:param name="name" select="'o'"/>-->
  <!--    <xsl:value-of select="$indent"/>-->
  <!--    <xsl:text>Phi </xsl:text>-->
  <!--    <xsl:value-of select="$name"/>-->
  <!--    <xsl:text> = </xsl:text>-->
  <!--    <xsl:text>new PhDefault() { </xsl:text>-->
  <!--    <xsl:text>/</xsl:text>-->
  <!--    <xsl:text>* anonymous abstract object without attributes */ };</xsl:text>-->
  <!--    <xsl:value-of select="eo:eol(0)"/>-->
  <!--  </xsl:template>-->
  <!-- Based, not method -->
  <xsl:template match="o[@base and not(starts-with(@base, '.'))]">
    <xsl:param name="name"/>
    <xsl:param name="indent"/>
    <xsl:variable name="current" select="."/>
    <xsl:variable name="source" select="//*[generate-id()!=generate-id($current) and @name=$current/@base and @line=$current/@ref]"/>
    <!-- Terminate -->
    <xsl:if test="count($source) &gt; 1">
      <xsl:message terminate="yes">
        <xsl:text>Found more than one target of '</xsl:text>
        <xsl:value-of select="$current/@base"/>
        <xsl:text>' at the line #</xsl:text>
        <xsl:value-of select="$current/@line"/>
        <xsl:text>leading to</xsl:text>
        <xsl:for-each select="$source">
          <xsl:if test="position()&gt;1">
            <xsl:text>,</xsl:text>
          </xsl:if>
          <xsl:text>&lt;</xsl:text>
          <xsl:value-of select="name(.)"/>
          <xsl:text>/&gt;</xsl:text>
          <xsl:text>at line #</xsl:text>
          <xsl:value-of select="@line"/>
        </xsl:for-each>
        <xsl:text>; it's an internal bug</xsl:text>
      </xsl:message>
    </xsl:if>
    <xsl:value-of select="eo:eol($indent)"/>
    <xsl:text>let </xsl:text>
    <xsl:value-of select="$name"/>
    <xsl:text> = </xsl:text>
    <xsl:choose>
      <xsl:when test="@primitive and @base">
        <xsl:value-of select="eo:fetch(@base)"/>
        <xsl:text>.copy()</xsl:text>
      </xsl:when>
      <xsl:when test="@base='$'">
        <xsl:text>rho</xsl:text>
      </xsl:when>
      <xsl:when test="@base='Q'">
        <xsl:text>phi</xsl:text>
      </xsl:when>
      <xsl:when test="@base='^'">
        <xsl:text>taken(rho, '</xsl:text>
        <xsl:value-of select="$RHO"/>
        <xsl:text>')</xsl:text>
      </xsl:when>
      <xsl:when test="$source/@ancestors">
        <xsl:value-of select="eo:object-name($source/@name, eo:suffix(@line, @pos))"/>
        <xsl:text>(rho)</xsl:text>
      </xsl:when>
      <xsl:when test="$source and name($source)='object'">
        <xsl:value-of select="eo:fetch(concat($source/@package, '.', $source/@name))"/>
      </xsl:when>
      <xsl:when test="$source/@level">
        <xsl:for-each select="0 to $source/@level">
          <xsl:text>taken(</xsl:text>
        </xsl:for-each>
        <xsl:text>rho</xsl:text>
        <xsl:for-each select="1 to $source/@level">
          <xsl:text>, '</xsl:text>
          <xsl:value-of select="$RHO"/>
          <xsl:text>')</xsl:text>
        </xsl:for-each>
        <xsl:text>, '</xsl:text>
        <xsl:value-of select="$source/@name"/>
        <xsl:text>')</xsl:text>
      </xsl:when>
      <xsl:when test="$source">
        <xsl:text>taken(rho, '</xsl:text>
        <xsl:value-of select="eo:attr-name(@base)"/>
        <xsl:text>')</xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="eo:fetch(@base)"/>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:apply-templates select="." mode="application">
      <xsl:with-param name="name" select="$name"/>
      <xsl:with-param name="indent" select="$indent"/>
    </xsl:apply-templates>
    <!--    <xsl:apply-templates select="." mode="located">-->
    <!--      <xsl:with-param name="name" select="$name"/>-->
    <!--      <xsl:with-param name="indent" select="$indent"/>-->
    <!--    </xsl:apply-templates>-->
  </xsl:template>
  <!-- Based, method, starts with . -->
  <xsl:template match="o[starts-with(@base, '.') and *]">
    <xsl:param name="indent"/>
    <xsl:param name="name"/>
    <xsl:apply-templates select="*[1]">
      <xsl:with-param name="name">
        <xsl:value-of select="$name"/>
        <xsl:text>_base</xsl:text>
      </xsl:with-param>
      <xsl:with-param name="indent" select="$indent"/>
    </xsl:apply-templates>
    <xsl:value-of select="eo:eol($indent)"/>
    <xsl:text>let </xsl:text>
    <xsl:value-of select="$name"/>
    <xsl:text> = taken(</xsl:text>
    <xsl:value-of select="$name"/>
    <xsl:text>_base, '</xsl:text>
    <xsl:variable name="method" select="substring-after(@base, '.')"/>
    <xsl:choose>
      <xsl:when test="$method='^'">
        <xsl:value-of select="$RHO"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:value-of select="eo:attr-name($method)"/>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:text>')</xsl:text>
    <!--    <xsl:apply-templates select="." mode="located">-->
    <!--      <xsl:with-param name="name" select="$name"/>-->
    <!--      <xsl:with-param name="indent" select="$indent"/>-->
    <!--    </xsl:apply-templates>-->
    <xsl:apply-templates select="." mode="application">
      <xsl:with-param name="name" select="$name"/>
      <xsl:with-param name="indent" select="$indent"/>
      <xsl:with-param name="skip" select="1"/>
    </xsl:apply-templates>
  </xsl:template>
  <!--  <xsl:template match="*" mode="located">-->
  <!--    <xsl:param name="indent"/>-->
  <!--    <xsl:param name="name" select="'o'"/>-->
  <!--    <xsl:if test="@line and @pos">-->
  <!--      <xsl:value-of select="$indent"/>-->
  <!--      <xsl:value-of select="eo:tabs(1)"/>-->
  <!--      <xsl:value-of select="$name"/>-->
  <!--      <xsl:text> = new PhLocated(</xsl:text>-->
  <!--      <xsl:value-of select="$name"/>-->
  <!--      <xsl:text>, </xsl:text>-->
  <!--      <xsl:value-of select="@line"/>-->
  <!--      <xsl:text>, </xsl:text>-->
  <!--      <xsl:value-of select="@pos"/>-->
  <!--      <xsl:text>, </xsl:text>-->
  <!--      <xsl:text>"</xsl:text>-->
  <!--      <xsl:value-of select="@loc"/>-->
  <!--      <xsl:text>"</xsl:text>-->
  <!--      <xsl:text>);</xsl:text>-->
  <!--      <xsl:value-of select="eo:eol(0)"/>-->
  <!--    </xsl:if>-->
  <!--  </xsl:template>-->
  <!-- APPLICATION  -->
  <xsl:template match="*" mode="application">
    <xsl:param name="indent"/>
    <xsl:param name="name"/>
    <xsl:param name="skip" select="0"/>
    <!-- CREATE OBJECTS TO PUT -->
    <xsl:for-each select="./*[name()!='value' and position()&gt;$skip][not(@level)]">
      <!-- VARIABLE TO PUT -->
      <xsl:variable name="put">
        <xsl:value-of select="$name"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="position()"/>
      </xsl:variable>
      <!-- FETCH NEXT OBJECT -->
      <xsl:apply-templates select=".">
        <xsl:with-param name="name" select="$put"/>
        <xsl:with-param name="indent" select="$indent+1"/>
      </xsl:apply-templates>
    </xsl:for-each>
    <!-- PUT OBJECTS -->
    <xsl:variable name="to_put" select="./*[name()!='value' and position() &gt; $skip][not(@level)]"/>
    <xsl:if test="count($to_put)&gt;0">
      <xsl:value-of select="eo:eol($indent)"/>
      <xsl:value-of select="$name"/>
      <xsl:text> = applied(</xsl:text>
      <xsl:value-of select="$name"/>
      <xsl:text>, {</xsl:text>
      <xsl:value-of select="eo:eol($indent+1)"/>
      <xsl:for-each select="$to_put">
        <xsl:choose>
          <xsl:when test="@as">
            <xsl:choose>
              <xsl:when test="matches(@as,'^[0-9]+$')">
                <xsl:value-of select="eo:attr-name(@as)"/>
              </xsl:when>
              <xsl:otherwise>
                <xsl:text>'</xsl:text>
                <xsl:value-of select="eo:attr-name(@as)"/>
                <xsl:text>'</xsl:text>
              </xsl:otherwise>
            </xsl:choose>
          </xsl:when>
          <xsl:otherwise>
            <xsl:value-of select="position()-1"/>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:text>: </xsl:text>
        <xsl:value-of select="$name"/>
        <xsl:text>_</xsl:text>
        <xsl:value-of select="position()"/>
        <xsl:choose>
          <xsl:when test="position()=last()">
            <xsl:value-of select="eo:eol($indent)"/>
          </xsl:when>
          <xsl:otherwise>
            <xsl:text>,</xsl:text>
            <xsl:value-of select="eo:eol($indent+1)"/>
          </xsl:otherwise>
        </xsl:choose>
      </xsl:for-each>
      <xsl:text>})</xsl:text>
    </xsl:if>
    <xsl:apply-templates select="value">
      <xsl:with-param name="name" select="$name"/>
      <xsl:with-param name="indent" select="$indent"/>
    </xsl:apply-templates>
  </xsl:template>
  <!-- VALUE TO PUT  -->
  <xsl:template match="value">
    <xsl:param name="indent"/>
    <xsl:param name="name"/>
    <xsl:value-of select="eo:eol($indent)"/>
    <xsl:value-of select="$name"/>
    <xsl:text> = applied(</xsl:text>
    <xsl:value-of select="$name"/>
    <xsl:text>, {</xsl:text>
    <xsl:value-of select="eo:eol($indent + 1)"/>
    <xsl:text>0: object().with({</xsl:text>
    <xsl:value-of select="eo:eol($indent + 2)"/>
    <xsl:text>'</xsl:text>
    <xsl:value-of select="$DELTA"/>
    <xsl:text>': </xsl:text>
    <xsl:value-of select="text()"/>
    <xsl:value-of select="eo:eol($indent + 1)"/>
    <xsl:text>})</xsl:text>
    <xsl:value-of select="eo:eol($indent)"/>
    <xsl:text>})</xsl:text>
  </xsl:template>
  <!-- Object for tests -->
  <xsl:template match="object" mode="tests">
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:text>it('test "</xsl:text>
    <xsl:value-of select="eo:object-name(@name, eo:suffix(@line, @pos))"/>
    <xsl:text>" should work', function(done) {</xsl:text>
    <xsl:value-of select="eo:eol(1)"/>
    <xsl:text>this.timeout(0)</xsl:text>
    <xsl:value-of select="eo:eol(1)"/>
    <xsl:choose>
      <xsl:when test="starts-with(@name, 'throws')">
        <xsl:text>assert.throws(() =&gt; </xsl:text>
      </xsl:when>
      <xsl:otherwise>
        <xsl:text>assert.ok(</xsl:text>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:apply-templates select="." mode="dataized"/>
    <xsl:text>)</xsl:text>
    <xsl:value-of select="eo:eol(1)"/>
    <xsl:text>done()</xsl:text>
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:text>})</xsl:text>
  </xsl:template>
  <!-- Dataized object for tests -->
  <xsl:template match="object" mode="dataized">
    <xsl:param name="indent"/>
    <xsl:text>dataized(</xsl:text>
    <xsl:value-of select="eo:object-name(@name, eo:suffix(@line, @pos))"/>
    <xsl:text>(), BOOL)</xsl:text>
  </xsl:template>
  <!-- Disclaimer -->
  <xsl:template match="/program" mode="license">
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:text>/* </xsl:text>
    <xsl:value-of select="$disclaimer"/>
    <xsl:text> */</xsl:text>
  </xsl:template>
  <!-- Imports -->
  <xsl:template match="/program" mode="imports">
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:text>const attr = require('eo2js-runtime/src/runtime/attribute/attr')</xsl:text>
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:text>const object = require('eo2js-runtime/src/runtime/object')</xsl:text>
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:text>const phi = require('eo2js-runtime/src/runtime/phi')</xsl:text>
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:text>const taken = require('eo2js-runtime/src/runtime/taken')</xsl:text>
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:text>const applied = require('eo2js-runtime/src/runtime/applied')</xsl:text>
  </xsl:template>
  <!-- Imports for tests -->
  <xsl:template match="/program" mode="test-imports">
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:text>const dataized = require('eo2js-runtime/src/runtime/dataized')</xsl:text>
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:text>const assert = require('assert')</xsl:text>
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:text>const {BOOL} = require('eo2js-runtime/src/runtime/data')</xsl:text>
  </xsl:template>
  <!-- Atom imports -->
  <xsl:template match="object" mode="atom-imports">
    <xsl:value-of select="eo:eol(0)"/>
    <xsl:text>const </xsl:text>
    <xsl:value-of select="eo:object-name(@name, eo:suffix(@line, @pos))"/>
    <xsl:text> = require('eo2js-runtime/src/objects/</xsl:text>
    <xsl:if test="@package!=''">
      <xsl:value-of select="replace(@package, '\.', '/')"/>
      <xsl:text>/</xsl:text>
    </xsl:if>
    <xsl:value-of select="replace(@name, '@', $PHI)"/>
    <xsl:text>')</xsl:text>
  </xsl:template>
  <xsl:template match="node()|@*">
    <xsl:copy>
      <xsl:apply-templates select="node()|@*"/>
    </xsl:copy>
  </xsl:template>
</xsl:stylesheet>
